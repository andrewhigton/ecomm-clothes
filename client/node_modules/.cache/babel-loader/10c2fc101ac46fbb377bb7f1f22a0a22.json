{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/react/ecomm-clothes/src/App.js\";\nimport React, { useEffect } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component';\nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils';\nimport { setCurrentUser } from './redux/user/user.actions';\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport './App.css';\n\nconst App = ({\n  setCurrentUser,\n  currentUser\n}) => {\n  useEffect(() => {\n    setCurrentUser();\n  }, [setCurrentUser]); //unsubscribeFromAuth = null;\n  // componentDidMount() {\n  // const { setCurrentUser } = this.props;\n  //     this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n  //     if (userAuth) {\n  //       const userRef = await createUserProfileDocument(userAuth);\n  //       userRef.onSnapshot(snapShot => {\n  //         setCurrentUser({\n  //             id: snapShot.id,\n  //             ...snapShot.data()\n  //           })\n  //       });\n  //     }\n  //     setCurrentUser(userAuth);\n  //   });\n  // //}\n  // componentWillUnmount() {\n  //   this.unsubscribeFromAuth();\n  // }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(BrowserRouter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: HomePage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/shop\",\n    component: ShopPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/checkout\",\n    component: CheckoutPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/signin\",\n    render: () => currentUser ? React.createElement(Redirect, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }) : React.createElement(SignInAndSignUpPage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }))));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // <Route exact path='/signin' render={() => this.props.currentUser ? \n//                 (<Redirect to ='/' />\n//                 ) : (\n// class App extends Component {\n//     //removed this for redux\n//   //   constructor(props) {\n//   //   super(props);\n//   //   this.state = {\n//   //     currentUser: null\n//   //   }\n//   // }\n// // this fetches the users on luanch\n// // componentDidMount() {\n// //   fetch('http://localhost:3000/')\n// //   .then(response => response.json())\n// //   .then(data => {\n// //       //console.log(data)\n// //       setCurrentUser({\n// //               id: data.id,\n// //               data\n// //     })\n// //   })\n// // }\n//   // this awaits conf from firebase, then sets the currentUser \n//   //how would you do this? how to get the info from the signin?\n//   //its a separate process. on componentdidmount, it checks in with the db, if true, we have a sign in\n//   //so in firebase, it logs as a user as true. how would ps do this? \n//   //then you check on app.js separately, I believe, whether the user is logged in. \n//   //if so, you update setCurrentuser from there. \n//   //but, i would wiat until you come across this in postgress studies. or Mongo. \n//   //otherwise, you will waste valuable time    \n//   unsubscribeFromAuth = null;\n//   componentDidMount() {\n//       const { setCurrentUser } = this.props;\n//       this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n//       if (userAuth) {\n//         const userRef = await createUserProfileDocument(userAuth);\n//         //here, if true, you also set state in the app \n//         userRef.onSnapshot(snapShot => {\n//           setCurrentUser({\n//               id: snapShot.id,\n//               ...snapShot.data()\n//             })\n//         });\n//       }\n//       //tihs resets it to null when logged out, because userAuth is null\n//       //this.setState({ currentUser: userAuth });\n//       setCurrentUser(userAuth);\n//     });\n//   }\n//   componentWillUnmount() {\n//     this.unsubscribeFromAuth();\n//   }\n//     render () {\n//     return (\n//     \t<div>\n//     \t\t<BrowserRouter>\n//         <Header />\n//           <Switch>\n//     \t\t\t<Route exact path='/' component={HomePage} />\n//     \t\t\t<Route path='/shop' component={ShopPage} />\n//           <Route exact path='/checkout' component={CheckoutPage} />\n//           <Route exact path='/signin' render={() => this.props.currentUser ? (<Redirect to='/' />) : \n//             (<SignInAndSignUpPage />)\n//             // {...props} currentUser={this.state.currentUser}\n//           }/>\n//     \t\t</Switch>\n//     \t\t</BrowserRouter>\n//     \t</div>\n// \t\t)\n// \t}\n// }\n// //earlier\n// // const mapStateToProps = ({ user }) => ({\n// //   currentUser: user.currentUser\n// // })\n// const mapStateToProps = createStructuredSelector({\n//   currentUser: selectCurrentUser\n// })\n// //here you use dispatch to pass the action object, setCurrenUser, with the new user, to the reducers\n// //the reducers work out which one is needed, then pass that along to the store\n// const mapDispatchToProps = dispatch => ({\n//   setCurrentUser: user => dispatch(setCurrentUser(user))\n// })\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n// // <Route exact path='/signin' render={() => this.props.currentUser ? \n// //                 (<Redirect to ='/' />\n// //                 ) : (","map":{"version":3,"sources":["/Users/andrewhigton/Documents/react/ecomm-clothes/src/App.js"],"names":["React","useEffect","BrowserRouter","Switch","Route","Redirect","connect","SignInAndSignUpPage","HomePage","ShopPage","Header","auth","createUserProfileDocument","setCurrentUser","selectCurrentUser","createStructuredSelector","CheckoutPage","App","currentUser","mapStateToProps","mapDispatchToProps","dispatch","user"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport SignInAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-and-sign-up.component'; \nimport HomePage from './pages/homepage/homepage.component';\nimport ShopPage from './pages/shop/shop.component';\nimport Header from './components/header/header.component';\nimport { auth, createUserProfileDocument } from './firebase/firebase.utils';\nimport { setCurrentUser } from './redux/user/user.actions';\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport CheckoutPage from './pages/checkout/checkout.component';\nimport './App.css';\n\n\nconst App = ({ setCurrentUser, currentUser }) => {\n      useEffect(() => {\n        setCurrentUser();\n      }, [setCurrentUser]); \n      //unsubscribeFromAuth = null;\n\n\n  // componentDidMount() {\n      // const { setCurrentUser } = this.props;\n\n  //     this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n  //     if (userAuth) {\n  //       const userRef = await createUserProfileDocument(userAuth);\n  //       userRef.onSnapshot(snapShot => {\n  //         setCurrentUser({\n  //             id: snapShot.id,\n  //             ...snapShot.data()\n  //           })\n  //       });\n  //     }\n  //     setCurrentUser(userAuth);\n  //   });\n  // //}\n\n  // componentWillUnmount() {\n  //   this.unsubscribeFromAuth();\n  // }\n\n    return (\n      <div>\n        <BrowserRouter>\n        <Header />\n          <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/shop' component={ShopPage} />\n          <Route exact path='/checkout' component={CheckoutPage} />\n          <Route exact path='/signin' render={() => currentUser ? (<Redirect to='/' />) : \n            (<SignInAndSignUpPage />)\n          }/>\n        </Switch>\n        </BrowserRouter>\n      </div>\n    )\n}\n\nconst mapStateToProps = createStructuredSelector({\n  currentUser: selectCurrentUser\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n})\n  \nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n// <Route exact path='/signin' render={() => this.props.currentUser ? \n//                 (<Redirect to ='/' />\n//                 ) : (\n\n\n\n// class App extends Component {\n//     //removed this for redux\n//   //   constructor(props) {\n//   //   super(props);\n\n//   //   this.state = {\n//   //     currentUser: null\n//   //   }\n//   // }\n\n// // this fetches the users on luanch\n// // componentDidMount() {\n// //   fetch('http://localhost:3000/')\n// //   .then(response => response.json())\n// //   .then(data => {\n// //       //console.log(data)\n// //       setCurrentUser({\n// //               id: data.id,\n// //               data\n// //     })\n// //   })\n// // }\n\n//   // this awaits conf from firebase, then sets the currentUser \n//   //how would you do this? how to get the info from the signin?\n//   //its a separate process. on componentdidmount, it checks in with the db, if true, we have a sign in\n//   //so in firebase, it logs as a user as true. how would ps do this? \n//   //then you check on app.js separately, I believe, whether the user is logged in. \n//   //if so, you update setCurrentuser from there. \n//   //but, i would wiat until you come across this in postgress studies. or Mongo. \n//   //otherwise, you will waste valuable time    \n\n//   unsubscribeFromAuth = null;\n\n//   componentDidMount() {\n//       const { setCurrentUser } = this.props;\n\n//       this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n//       if (userAuth) {\n//         const userRef = await createUserProfileDocument(userAuth);\n//         //here, if true, you also set state in the app \n//         userRef.onSnapshot(snapShot => {\n//           setCurrentUser({\n//               id: snapShot.id,\n//               ...snapShot.data()\n//             })\n//         });\n//       }\n//       //tihs resets it to null when logged out, because userAuth is null\n//       //this.setState({ currentUser: userAuth });\n//       setCurrentUser(userAuth);\n//     });\n//   }\n\n//   componentWillUnmount() {\n//     this.unsubscribeFromAuth();\n//   }\n\n//     render () {\n//     return (\n//     \t<div>\n//     \t\t<BrowserRouter>\n//         <Header />\n//           <Switch>\n//     \t\t\t<Route exact path='/' component={HomePage} />\n//     \t\t\t<Route path='/shop' component={ShopPage} />\n//           <Route exact path='/checkout' component={CheckoutPage} />\n//           <Route exact path='/signin' render={() => this.props.currentUser ? (<Redirect to='/' />) : \n//             (<SignInAndSignUpPage />)\n//             // {...props} currentUser={this.state.currentUser}\n//           }/>\n//     \t\t</Switch>\n//     \t\t</BrowserRouter>\n//     \t</div>\n// \t\t)\n// \t}\n// }\n\n// //earlier\n// // const mapStateToProps = ({ user }) => ({\n// //   currentUser: user.currentUser\n// // })\n\n// const mapStateToProps = createStructuredSelector({\n//   currentUser: selectCurrentUser\n// })\n\n\n// //here you use dispatch to pass the action object, setCurrenUser, with the new user, to the reducers\n// //the reducers work out which one is needed, then pass that along to the store\n// const mapDispatchToProps = dispatch => ({\n//   setCurrentUser: user => dispatch(setCurrentUser(user))\n// })\n  \n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n// // <Route exact path='/signin' render={() => this.props.currentUser ? \n// //                 (<Redirect to ='/' />\n// //                 ) : ("]},"metadata":{},"sourceType":"module"}