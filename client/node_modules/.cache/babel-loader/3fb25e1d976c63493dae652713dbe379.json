{"ast":null,"code":"var _jsxFileName = \"/Users/andrewhigton/Documents/react/tictactoe/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}), document.getElementById('root')); // import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// function Square(props) {\n// \treturn (\n// \t\t<button className='square' onClick={props.onClick}>\n// \t\t{props.value}\n// \t\t</button>\n// \t\t)\n// \t}\n// class Board extends React.Component {\n// \t// constructor(props) {\n// \t// \tsuper(props) \n// \t// \tthis.state = {\n// \t// \t\tsquares: Array(9).fill(null),\n// \t// \t\txIsNext: true,\n// \t// \t}\n// \t// }\n// \t// handleClick(i) {\n// \t// \tconst squares = this.state.squares.slice();\n// \t// \tsquares[i] = this.state.xIsNext ? 'X' : 'O';\n// \t// \tthis.setState({\n// \t// \t\tsquares: squares,\n// \t// \t\txIsNext: !this.state.xIsNext,\n// \t// \t});\n// \t// }\n// \t// renderSquare(i) {\n// \t// \treturn (\n// \t// \t\t<Square \n// \t// \t\t\tvalue={this.state.squares[i]}\n// \t// \t\t\tonClick={() => this.handleClick(i)}\n// \t// \t\t/>\n// \t// \t);\n// \t// }\n// \trenderSquare(i) {\n// \t\treturn (\n// \t\t\t<Square \n// \t\t\t\tvalue={this.props.squares[i]}\n// \t\t\t\tonClick={() => this.props.onClick(i)}\n// \t\t\t/>\n// \t\t);\n// \t}\n// \trender() {\n// \t\t// const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O') \n// \t\treturn (\n// \t\t\t<div>\n// \t\t\t\t\t<div className='board-row'>\n// \t\t\t\t\t\t{this.renderSquare(0)}\n// \t\t\t\t\t\t{this.renderSquare(1)}\n// \t\t\t\t\t\t{this.renderSquare(2)}\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className='board-row'>\n// \t\t\t\t\t\t{this.renderSquare(3)}\n// \t\t\t\t\t\t{this.renderSquare(4)}\n// \t\t\t\t\t\t{this.renderSquare(5)}\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className='board-row'>\n// \t\t\t\t\t\t{this.renderSquare(6)}\n// \t\t\t\t\t\t{this.renderSquare(7)}\n// \t\t\t\t\t\t{this.renderSquare(8)}\n// \t\t\t\t\t</div>\n// \t\t\t\t</div>\n// \t\t\t)\n// \t\t}\n// \t}\n// \tclass Game extends React.Component {\n// \t\tconstructor(props) {\n// \t\t\tsuper(props) \n// \t\t\tthis.state = {\n// \t\t\t\thistory: [\n// \t\t\t\t{\n// \t\t\t\t squares: Array(9).fill(null)\n// \t\t\t\t}\n// \t\t\t\t],\n// \t\t\t\tstepNumber: 0,\n// \t\t\t\txIsNext: true,\n// \t\t\t}\n// \t\t}\n// \thandleClick(i) {\n// \t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1)\n// \t\tconst squares = current.squares.slice();\n// \t\tconst current = history[history.length - 1];\n// \t\tif (calculateWinner(squares) || squares[i]) {\n// \t      return;\n// \t    }\n// \t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\n// \t\tthis.setState({\n// \t\t\thistory: history.concat([\n// \t\t       {\n// \t\t       squares: squares\n// \t\t       }\n// \t\t    ]),\n// \t\t\tstepNumber: history.length,\n// \t\t\txIsNext: !this.state.xIsNext,\n// \t\t\t});\n// \t\t}\n// \t\tjumpTo(step) {\n// \t\t\tthis.setState({\n// \t\t\t\tstepNumber: step,\n// \t\t\t\txIsNext: (step % 2) === 0\n// \t\t\t});\n// \t\t}\n// \t\trender() {\n// \t\t\tconst history = this.state.history;\n// \t\t\tconst current = history[this.state.stepNumber];\n// \t\t\tconst winner = calculateWinner(current.squares);\n// \t\t\tconst moves = history.map((step, move) => {\n// \t\t\t\tconst desc = move ? \n// \t\t\t\t'Go to move #' + move :\n//         \t\t'Go to game start';\n// \t\t\treturn (\n// \t\t\t\t<li key='move'>\n// \t\t\t\t\t<button onClick={() => this.jumpTo(move)}>{desc}</button>\n// \t\t\t\t</li>\n// \t\t\t\t);\n// \t\t\t});\n// \t\t\tlet status;\n// \t\t\tif(winner) {\n// \t\t\t\tstatus = 'Winner: ' + winner;\n// \t\t\t} else {\n// \t\t\t\tstatus = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n// \t\t\t}\n// \t\t\treturn (\n// \t\t\t<div className='board'>\n// \t\t\t\t<div className='game-board'>\n// \t\t\t\t\t<Board \n// \t\t\t\t\tsquares={current.squares}\n// \t\t\t\t\tonClick={i => this.handleClick(i)}\n// \t\t\t\t\t/>\t\n// \t\t\t\t</div>\n// \t\t\t\t<div className='game-info'>\n// \t\t\t\t\t<div>{status}</div>\n//           \t\t\t<ol>{moves}</ol>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t\t);\n// \t\t\t}\n// \t\t}\n// ReactDOM.render(\n// \t<Game />,\n// \tdocument.getElementById('root')\n// \t);\n// \tfunction calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6]\n//   ];\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }","map":{"version":3,"sources":["/Users/andrewhigton/Documents/react/tictactoe/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEAD,QAAQ,CAACE,MAAT,CACO,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADP,EAEOC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFP,E,CAOA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n      \t<App />,\n      \tdocument.getElementById('root')\n\t\t);\n\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n\n\n// function Square(props) {\n// \treturn (\n// \t\t<button className='square' onClick={props.onClick}>\n// \t\t{props.value}\n// \t\t</button>\n// \t\t)\n// \t}\n\n// class Board extends React.Component {\n\t\n// \t// constructor(props) {\n// \t// \tsuper(props) \n// \t// \tthis.state = {\n// \t// \t\tsquares: Array(9).fill(null),\n// \t// \t\txIsNext: true,\n// \t// \t}\n// \t// }\n\n// \t// handleClick(i) {\n// \t// \tconst squares = this.state.squares.slice();\n// \t// \tsquares[i] = this.state.xIsNext ? 'X' : 'O';\n// \t// \tthis.setState({\n// \t// \t\tsquares: squares,\n// \t// \t\txIsNext: !this.state.xIsNext,\n// \t// \t});\n// \t// }\n\n// \t// renderSquare(i) {\n// \t// \treturn (\n// \t// \t\t<Square \n// \t// \t\t\tvalue={this.state.squares[i]}\n// \t// \t\t\tonClick={() => this.handleClick(i)}\n// \t// \t\t/>\n// \t// \t);\n// \t// }\n\n// \trenderSquare(i) {\n// \t\treturn (\n// \t\t\t<Square \n// \t\t\t\tvalue={this.props.squares[i]}\n// \t\t\t\tonClick={() => this.props.onClick(i)}\n// \t\t\t/>\n// \t\t);\n// \t}\n\n// \trender() {\n// \t\t// const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O') \n// \t\treturn (\n// \t\t\t<div>\n// \t\t\t\t\t<div className='board-row'>\n// \t\t\t\t\t\t{this.renderSquare(0)}\n// \t\t\t\t\t\t{this.renderSquare(1)}\n// \t\t\t\t\t\t{this.renderSquare(2)}\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className='board-row'>\n// \t\t\t\t\t\t{this.renderSquare(3)}\n// \t\t\t\t\t\t{this.renderSquare(4)}\n// \t\t\t\t\t\t{this.renderSquare(5)}\n// \t\t\t\t\t</div>\n// \t\t\t\t\t<div className='board-row'>\n// \t\t\t\t\t\t{this.renderSquare(6)}\n// \t\t\t\t\t\t{this.renderSquare(7)}\n// \t\t\t\t\t\t{this.renderSquare(8)}\n// \t\t\t\t\t</div>\n// \t\t\t\t</div>\n// \t\t\t)\n// \t\t}\n// \t}\n\n// \tclass Game extends React.Component {\n// \t\tconstructor(props) {\n// \t\t\tsuper(props) \n// \t\t\tthis.state = {\n// \t\t\t\thistory: [\n// \t\t\t\t{\n// \t\t\t\t squares: Array(9).fill(null)\n// \t\t\t\t}\n// \t\t\t\t],\n// \t\t\t\tstepNumber: 0,\n// \t\t\t\txIsNext: true,\n// \t\t\t}\n// \t\t}\n\n// \thandleClick(i) {\n// \t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1)\n// \t\tconst squares = current.squares.slice();\n// \t\tconst current = history[history.length - 1];\n// \t\tif (calculateWinner(squares) || squares[i]) {\n// \t      return;\n// \t    }\n// \t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\n// \t\tthis.setState({\n// \t\t\thistory: history.concat([\n// \t\t       {\n// \t\t       squares: squares\n// \t\t       }\n// \t\t    ]),\n// \t\t\tstepNumber: history.length,\n// \t\t\txIsNext: !this.state.xIsNext,\n// \t\t\t});\n// \t\t}\n\n// \t\tjumpTo(step) {\n// \t\t\tthis.setState({\n// \t\t\t\tstepNumber: step,\n// \t\t\t\txIsNext: (step % 2) === 0\n// \t\t\t});\n// \t\t}\n\n// \t\trender() {\n// \t\t\tconst history = this.state.history;\n// \t\t\tconst current = history[this.state.stepNumber];\n// \t\t\tconst winner = calculateWinner(current.squares);\n\n// \t\t\tconst moves = history.map((step, move) => {\n// \t\t\t\tconst desc = move ? \n// \t\t\t\t'Go to move #' + move :\n//         \t\t'Go to game start';\n// \t\t\treturn (\n// \t\t\t\t<li key='move'>\n// \t\t\t\t\t<button onClick={() => this.jumpTo(move)}>{desc}</button>\n// \t\t\t\t</li>\n// \t\t\t\t);\n// \t\t\t});\n\n// \t\t\tlet status;\n// \t\t\tif(winner) {\n// \t\t\t\tstatus = 'Winner: ' + winner;\n// \t\t\t} else {\n// \t\t\t\tstatus = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n// \t\t\t}\n\n// \t\t\treturn (\n// \t\t\t<div className='board'>\n// \t\t\t\t<div className='game-board'>\n// \t\t\t\t\t<Board \n// \t\t\t\t\tsquares={current.squares}\n// \t\t\t\t\tonClick={i => this.handleClick(i)}\n// \t\t\t\t\t/>\t\n// \t\t\t\t</div>\n// \t\t\t\t<div className='game-info'>\n// \t\t\t\t\t<div>{status}</div>\n//           \t\t\t<ol>{moves}</ol>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t\t);\n// \t\t\t}\n// \t\t}\n\n// ReactDOM.render(\n// \t<Game />,\n// \tdocument.getElementById('root')\n// \t);\n\n// \tfunction calculateWinner(squares) {\n//   const lines = [\n//     [0, 1, 2],\n//     [3, 4, 5],\n//     [6, 7, 8],\n//     [0, 3, 6],\n//     [1, 4, 7],\n//     [2, 5, 8],\n//     [0, 4, 8],\n//     [2, 4, 6]\n//   ];\n//   for (let i = 0; i < lines.length; i++) {\n//     const [a, b, c] = lines[i];\n//     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//       return squares[a];\n//     }\n//   }\n//   return null;\n// }"]},"metadata":{},"sourceType":"module"}