{"ast":null,"code":"import _defineProperty from \"/Users/andrewhigton/Documents/react/ecomm-clothes/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  //find if there is a match to cartItemto Add in state\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id); //if true, map the array and add 1 to the quantity, else, reutrn the cartItem?? why?\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === cartItemToAdd.id ? _objectSpread({}, cartItem, {\n      quantity: cartItem.quantity + 1\n    }) : cartItem);\n  } //else add the item to the cart, with a quant of 1\n\n\n  return [...cartItems, _objectSpread({}, cartItemToAdd, {\n    quantity: 1\n  })];\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); //if true, filter and keep all items not equal to caritemtoremove\n\n  if (existingCartItem === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } //then what's the point of this bit? like a double down? \n  //go through this \n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? _objectSpread({}, cartItem, {\n    quantity: cartItem.quantity - 1\n  }) : cartItem);\n};","map":{"version":3,"sources":["/Users/andrewhigton/Documents/react/ecomm-clothes/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter"],"mappings":";;;;;;AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AAC1D;AACA,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACxBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EADlB,CAAzB,CAF0D,CAK1D;;AACA,MAAGH,gBAAH,EAAqB;AACpB,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IAC5BA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,qBAAwCD,QAAxC;AAAkDG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAAhF,SACEH,QAFI,CAAP;AAIC,GAXwD,CAYzD;;;AACA,SAAO,CAAC,GAAGJ,SAAJ,oBAAoBC,aAApB;AAAmCM,IAAAA,QAAQ,EAAE;AAA7C,KAAP;AACA,CAdK;AAgBP,OAAO,MAAMC,kBAAkB,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AAClE,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACxBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADrB,CAAzB,CADkE,CAIjE;;AACA,MAAGH,gBAAgB,KAAK,CAAxB,EAA2B;AAC1B,WAAOF,SAAS,CAACU,MAAV,CAAiBN,QAAQ,IAC9BA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAD5B,CAAP;AAEC,GAR+D,CASjE;AACA;;;AACA,SAAOL,SAAS,CAACM,GAAV,CAAcF,QAAQ,IAC5BA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,qBACKD,QADL;AACeG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAD7C,OAEEH,QAHI,CAAP;AAKC,CAhBI","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) => {\n\t//find if there is a match to cartItemto Add in state\n\tconst existingCartItem = cartItems.find(\n\t\tcartItem => cartItem.id === cartItemToAdd.id\n\t\t);\n\t//if true, map the array and add 1 to the quantity, else, reutrn the cartItem?? why?\n\tif(existingCartItem) {\n\t\treturn cartItems.map(cartItem => \n\t\t\tcartItem.id === cartItemToAdd.id ? { ...cartItem, quantity: cartItem.quantity + 1 }\n\t\t\t: cartItem\n\t\t\t)\n\t\t}\n\t\t//else add the item to the cart, with a quant of 1\n\t\treturn [...cartItems, { ...cartItemToAdd, quantity: 1 }]\n\t}\t \n\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n\tconst existingCartItem = cartItems.find(\n\t\tcartItem => cartItem.id === cartItemToRemove.id\n\t\t)\n\t\t//if true, filter and keep all items not equal to caritemtoremove\n\t\tif(existingCartItem === 1) {\n\t\t\treturn cartItems.filter(cartItem =>\n\t\t\t \tcartItem.id !== cartItemToRemove.id\n\t\t)}\n\t\t//then what's the point of this bit? like a double down? \n\t\t//go through this \n\t\treturn cartItems.map(cartItem => \n\t\t\tcartItem.id === cartItemToRemove.id ? \n\t\t\t{ ...cartItem, quantity: cartItem.quantity - 1 }\n\t\t\t: cartItem\n\t\t\t)\n\t\t};"]},"metadata":{},"sourceType":"module"}